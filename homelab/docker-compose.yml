# Optimized Docker Compose Configuration for Homelab
# Version: 2.0
# Networks: homelab (172.20.0.0/16), media (172.21.0.0/16)

networks:
  homelab:
    name: homelab
    driver: bridge
    enable_ipv6: false
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: br-homelab
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

  media:
    name: media
    driver: bridge
    enable_ipv6: false
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    driver_opts:
      com.docker.network.bridge.name: br-media
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

services:
  # ***********************************
  # ********** Dashboard & Monitoring *
  # ***********************************
  # ? Glance - Self-Hosted Dashboard
  glance:
    image: glanceapp/glance:latest
    container_name: glance
    restart: unless-stopped
    user: "${PUID:-1000}:${PGID:-1000}"
    environment:
      - TZ=${TZ:-America/Chicago}
    volumes:
      - ./glance:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro # For Docker monitoring widgets
    ports:
      - "8085:8080" # Glance web UI
    networks:
      homelab:
        ipv4_address: 172.20.0.85
      # Also connect to media network for complete service visibility
      media:
        ipv4_address: 172.21.0.85
    healthcheck:
      # test:
      #   [
      #     "CMD",
      #     "wget",
      #     "--no-verbose",
      #     "--tries=1",
      #     "--spider",
      #     "http://localhost:8080",
      #   ]
      # interval: 30s
      # timeout: 10s
      # retries: 3
      # start_period: 20s
      test: ping -c 1 www.google.com || exit 1
      interval: 20s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          memory: 128M
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=false" # Disable if using Traefik
      - "com.centurylinklabs.watchtower.enable=true" # Auto-update
      - "homepage.group=Infrastructure"
      - "homepage.name=Glance"
      - "homepage.icon=glance"
      - "homepage.href=http://glance.local:8085"
      - "homepage.description=Homelab Dashboard"

  # ************************************
  # ********** Core Infrastructure *****
  # ************************************

  # ? Home Assistant - Smart Home Hub
  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: homeassistant
    restart: unless-stopped
    privileged: true
    environment:
      - TZ=${TZ:-America/Chicago}
    volumes:
      - ./homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - ./nginx-proxy-manager/letsencrypt:/etc/letsencrypt:ro
    ports:
      - "8123:8123"
    networks:
      homelab:
        ipv4_address: 172.20.0.123
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    # devices:
    #   - /dev/ttyUSB0:/dev/ttyUSB0

  # ? AdGuard Home - DNS Ad Blocker
  adguardhome:
    image: docker.io/adguard/adguardhome:v0.107.52
    container_name: adguardhome
    restart: unless-stopped
    environment:
      - TZ=${TZ:-America/Chicago}
    ports:
      # Port 53 disabled - conflicts with systemd-resolved on runner
      # Use AdGuard via container IP (172.20.0.53) or custom DNS port
      # - "53:53/tcp"
      # - "53:53/udp"
      - "82:82/tcp" # Web interface (port 82 to avoid conflicts)
      - "8443:443/tcp" # HTTPS web interface
      - "3000:3000/tcp" # Initial setup
      - "853:853/tcp" # DNS-over-TLS
      - "784:784/udp" # DNS-over-QUIC
      - "853:853/udp"
      - "8853:8853/udp"
      - "5443:5443/tcp" # DNSCrypt
      - "5443:5443/udp"
    volumes:
      - ./adguardhome/work:/opt/adguardhome/work
      - ./adguardhome/conf:/opt/adguardhome/conf
    networks:
      homelab:
        ipv4_address: 172.20.0.53
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true

  # ? Traefik - Reverse Proxy
  traefik:
    image: docker.io/traefik:v3.3
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
      # - "8080:8080" # Dashboard (use Traefik routing instead)
    environment:
      - TZ=${TZ:-America/Chicago}
      # Cloudflare DNS Challenge (uncomment if using DNS challenge)
      # - CF_API_EMAIL=${CF_API_EMAIL}
      # - CF_API_KEY=${CF_API_KEY}
    volumes:
      # Traefik configuration files
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      # Let's Encrypt certificates (persistent storage)
      - ./traefik/letsencrypt:/letsencrypt
      # Logs
      - ./traefik/logs:/var/log/traefik
      # Docker socket (read-only for security)
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      homelab:
        ipv4_address: 172.20.0.81
      media:
        ipv4_address: 172.21.0.81
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 20s
      timeout: 10s
      retries: 5
      # test: ["CMD", "traefik", "healthcheck", "--ping"]
      # interval: 30s
      # timeout: 10s
      # retries: 3
      # start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          memory: 128M
    labels:
      # Enable Traefik for the dashboard
      - "traefik.enable=true"

      # Dashboard Router
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN:-local}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=dashboard-auth@file"

      # API Router (for health checks)
      - "traefik.http.routers.traefik-api.rule=Host(`traefik.${DOMAIN:-local}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.traefik-api.entrypoints=websecure"
      - "traefik.http.routers.traefik-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-api.service=api@internal"
      - "traefik.http.routers.traefik-api.middlewares=dashboard-auth@file"

      # Metadata
      - "com.centurylinklabs.watchtower.enable=true"
      - "homepage.group=Infrastructure"
      - "homepage.name=Traefik"
      - "homepage.icon=traefik"
      - "homepage.href=https://traefik.${DOMAIN:-local}"
      - "homepage.description=Reverse Proxy & Load Balancer"

  # ************************************
  # ********** AI & Knowledge **********
  # ************************************
  # ? Ollama - Local LLM Server
  ollama:
    image: docker.io/ollama/ollama:0.5.4
    container_name: ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - OLLAMA_NUM_PARALLEL=${OLLAMA_PARALLEL:-2}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_MODELS:-2}
      - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE:-5m}
    networks:
      homelab:
        ipv4_address: 172.20.0.11
    healthcheck:
      # test: ["CMD", "curl", "http://172.20.0.11:11434"]
      # interval: 30s
      # timeout: 10s
      # retries: 3
      # start_period: 40s
      test: ping -c 1 www.google.com || exit 1
      interval: 20s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: 8G
        reservations:
          memory: 2G
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # ? Ollama WebUI - Interface for Ollama
  ollama-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ollama-webui
    restart: unless-stopped
    ports:
      - "8081:8080" # Ollama WebUI
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-changeme}
      - WEBUI_AUTH=${WEBUI_AUTH:-true}
      - ENABLE_SIGNUP=${ENABLE_SIGNUP:-true}
    volumes:
      - ollama_webui_data:/app/backend/data
    depends_on:
      ollama:
        condition: service_healthy
        restart: true
    networks:
      homelab:
        ipv4_address: 172.20.0.12
    security_opt:
      - no-new-privileges:true

  # ************************************
  # ********** Media Services **********
  # ************************************
  # ? Jellyfin - Media Server
  jellyfin:
    image: docker.io/jellyfin/jellyfin:10.10.7
    container_name: jellyfin
    restart: unless-stopped
    user: "${PUID:-1000}:${PGID:-1000}"
    environment:
      - TZ=${TZ:-America/Chicago}
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_URL:-http://jellyfin.local}
    volumes:
      - ./jellyfin/config:/config
      - ./jellyfin/cache:/cache
      - ${MEDIA_PATH:-/data/media}:/media:ro
      - ${MEDIA_PATH2:-/data/media2}:/media2:ro
    ports:
      - "8096:8096"
      - "8920:8920"
      - "7359:7359/udp"
      - "1900:1900/udp"
    networks:
      homelab:
        ipv4_address: 172.20.0.96
      media:
        ipv4_address: 172.21.0.96
    # devices:
    #   - /dev/dri:/dev/dri  # Intel QuickSync
    # group_add:
    #   - "989"  # render group for hardware acceleration

  # ************************************
  # ********** VPN & Security **********
  # ************************************
  # ? Tailscale - Mesh VPN
  tailscale:
    image: docker.io/tailscale/tailscale:stable
    container_name: tailscale
    restart: unless-stopped
    hostname: homelab-tailscale
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
      - TS_ROUTES=${TS_ROUTES:-172.20.0.0/16,172.21.0.0/16}
      - TS_EXTRA_ARGS=--advertise-exit-node --accept-dns=false
    volumes:
      - ./tailscale/state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    network_mode: host
    # Note: sysctls cannot be used with host networking
    # Set these at the system level instead:
    # sudo sysctl -w net.ipv4.ip_forward=1
    # sudo sysctl -w net.ipv6.conf.all.forwarding=1

  # ? Vaultwarden - Password Manager
  vaultwarden:
    image: docker.io/vaultwarden/server:1.32.5
    container_name: vaultwarden
    restart: unless-stopped
    user: "${PUID:-1000}:${PGID:-1000}"
    environment:
      - TZ=${TZ:-America/New_York}
      - DOMAIN=${VAULTWARDEN_DOMAIN:-https://vault.local}
      - ADMIN_TOKEN=${VAULTWARDEN_ADMIN_TOKEN}
      - SIGNUPS_ALLOWED=${VAULTWARDEN_SIGNUPS_ALLOWED:-false}
      - INVITATIONS_ALLOWED=${VAULTWARDEN_INVITATIONS_ALLOWED:-true}
      - WEBSOCKET_ENABLED=true
      - SENDS_ALLOWED=true
      - EMERGENCY_ACCESS_ALLOWED=true
      - WEB_VAULT_ENABLED=true
      - LOG_LEVEL=${VAULTWARDEN_LOG_LEVEL:-warn}
      - EXTENDED_LOGGING=true
      - SHOW_PASSWORD_HINT=false
      - DATABASE_URL=sqlite:/data/db.sqlite3
      - DATABASE_MAX_CONNS=10
      - IP_HEADER=X-Real-IP
      - ICON_CACHE_TTL=2592000
      - ICON_CACHE_NEGTTL=259200
    volumes:
      - ./vaultwarden:/data
    ports:
      - "8222:80"
      - "3012:3012"
    networks:
      homelab:
        ipv4_address: 172.20.0.22
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          memory: 128M
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 20s
      timeout: 10s
      retries: 5
      # test: ["CMD", "curl", "-f", "http://localhost:80/alive"]
      # interval: 30s
      # timeout: 10s
      # retries: 3
      # start_period: 20s

  # ************************************
  # ********** Storage Services ********
  # ************************************
  # ? Samba - Network Attached Storage
  samba:
    image: ghcr.io/servercontainers/samba:latest
    container_name: samba
    restart: unless-stopped
    ports:
      - "445:445"
      - "139:139"
    environment:
      - TZ=${TZ:-America/New_York}
      - USERID=${PUID:-1000}
      - GROUPID=${PGID:-1000}
      - SHARE1=${SAMBA_SHARE1:-Media;/media;yes;no;yes;all;none}
      - SHARE2=${SAMBA_SHARE2:-Backup;/backup;yes;no;no;all;none}
      - USER1=${SAMBA_USER:-user;SAMBA_PASSWORD}
      - RECYCLE=false
    volumes:
      - ${NAS_PATH:-/data}:/media
      # - ${BACKUP_PATH:-/backup}:/backup
    networks:
      homelab:
        ipv4_address: 172.20.0.45
    cap_add:
      - SYS_ADMIN
      - DAC_READ_SEARCH
    security_opt:
      - no-new-privileges:true

  # ************************************
  # ********** Media Stack Services ****
  # ************************************
  # ? Gluetun - VPN Client for Media Services
  gluetun:
    image: docker.io/qmcgaw/gluetun:latest
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    networks:
      media:
        ipv4_address: 172.21.0.2
    ports:
      - "${FIREWALL_VPN_INPUT_PORTS:-51820}:${FIREWALL_VPN_INPUT_PORTS:-51820}"
      - "8080:8080" # qBittorrent WebUI (via gluetun network)
      - "9696:9696" # Prowlarr (via gluetun network)
      - "6789:6789" # NZBGet (via gluetun network)
      - "8000:8000" # Gluetun HTTP control server
    volumes:
      - ./gluetun:/gluetun
    environment:
      - VPN_SERVICE_PROVIDER=custom
      - VPN_TYPE=wireguard
      - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}
      - WIREGUARD_ADDRESS=${WIREGUARD_ADDRESS}
      - WIREGUARD_PUBLIC_KEY=${WIREGUARD_PUBLIC_KEY}
      - VPN_ENDPOINT_IP=${VPN_ENDPOINT_IP}
      - VPN_ENDPOINT_PORT=${VPN_ENDPOINT_PORT:-51820}
      - TZ=${TZ:-America/Chicago}
      - FIREWALL_VPN_INPUT_PORTS=${FIREWALL_VPN_INPUT_PORTS}
      - FIREWALL_OUTBOUND_SUBNETS=172.21.0.0/16,172.20.0.0/16
      - HTTPPROXY=off
      - SHADOWSOCKS=off
      - DOT=off
      - BLOCK_MALICIOUS=on
      - BLOCK_SURVEILLANCE=off
      - BLOCK_ADS=off
      - UPDATER_PERIOD=24h
      - HTTP_CONTROL_SERVER_ADDRESS=:8000
      - HTTP_CONTROL_SERVER_LOG=on
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 20s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1

  # ? qBittorrent - Torrent Client
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/Chicago}
      - WEBUI_PORT=8080
      - TORRENTING_PORT=${FIREWALL_VPN_INPUT_PORTS:-51820}
    volumes:
      - ./qbittorrent:/config
      - ${DOWNLOADS_PATH:-/data/downloads}:/downloads
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    network_mode: service:gluetun
    security_opt:
      - no-new-privileges:true

  # ? Prowlarr - Indexer Manager
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/Chicago}
    volumes:
      - ./prowlarr:/config
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    network_mode: service:gluetun
    security_opt:
      - no-new-privileges:true

  # ? Radarr - Movie Manager
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/Chicago}
    volumes:
      - ./radarr:/config
      - ${MEDIA_PATH:-/data/media}:/media
      - ${DOWNLOADS_PATH:-/data/downloads}:/downloads
    ports:
      - "7878:7878"
    networks:
      media:
        ipv4_address: 172.21.0.78
    security_opt:
      - no-new-privileges:true

  # ? Sonarr - TV Show Manager
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/New_York}
    volumes:
      - ./sonarr:/config
      - ${MEDIA_PATH:-/data/media}:/media
      - ${DOWNLOADS_PATH:-/data/downloads}:/downloads
    ports:
      - "8989:8989"
    networks:
      media:
        ipv4_address: 172.21.0.89
    security_opt:
      - no-new-privileges:true

  # ? Lidarr - Music Manager
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    restart: unless-stopped
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/New_York}
    volumes:
      - ./lidarr:/config
      - ${MEDIA_PATH:-/data/media}:/media
      - ${DOWNLOADS_PATH:-/data/downloads}:/downloads
    ports:
      - "8686:8686"
    networks:
      media:
        ipv4_address: 172.21.0.86
    security_opt:
      - no-new-privileges:true

  # ? Bazarr - Subtitle Manager
  bazarr:
    image: docker.io/linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/New_York}
    volumes:
      - ./bazarr:/config
      - ${MEDIA_PATH:-/data/media}:/media
    ports:
      - "6767:6767"
    networks:
      media:
        ipv4_address: 172.21.0.67
    security_opt:
      - no-new-privileges:true

  # ? Jellyseerr - Media Request Management
  jellyseerr:
    image: docker.io/fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    restart: unless-stopped
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/New_York}
      - LOG_LEVEL=info
    volumes:
      - ./jellyseerr:/app/config
    ports:
      - "5055:5055"
    networks:
      homelab:
        ipv4_address: 172.20.0.55
      media:
        ipv4_address: 172.21.0.55
    security_opt:
      - no-new-privileges:true

  # ? Byparr - Cloudflare Bypass
  byparr:
    image: ghcr.io/thephaseless/byparr:latest
    container_name: byparr
    restart: unless-stopped
    init: true
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - TZ=${TZ:-America/New_York}
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    network_mode: service:gluetun
    security_opt:
      - no-new-privileges:true

  # ? NZBGet - Usenet Client
  nzbget:
    image: lscr.io/linuxserver/nzbget:latest
    container_name: nzbget
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-America/Chicago}
    volumes:
      - ./nzbget:/config
      - ${DOWNLOADS_PATH:-/data/downloads}:/downloads
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    restart: unless-stopped
    network_mode: service:gluetun
    security_opt:
      - no-new-privileges:true

volumes:
  ollama_data:
    driver: local
  ollama_webui_data:
    driver: local
