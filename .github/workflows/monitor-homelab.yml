name: Monitor Homelab Health

on:
  schedule:
    # Run every 15 minutes
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      verbose:
        description: "Enable verbose output"
        required: false
        type: boolean
        default: false

env:
  ALERT_THRESHOLD: 3 # Number of consecutive failures before alert
  CHECK_TIMEOUT: 30 # Timeout for each health check in seconds

jobs:
  health-check:
    name: Check Homelab Services
    runs-on: self-hosted

    outputs:
      status: ${{ steps.check.outputs.status }}
      failed_services: ${{ steps.check.outputs.failed_services }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Perform Health Checks
        id: check
        env:
          VERBOSE: ${{ inputs.verbose }}
          HOMELAB_PATH: ~/homelab
        run: bash homelab/scripts/monitor-ci.sh health-check

      - name: Store Health Check Results
        if: always()
        uses: actions/cache@v3
        with:
          path: /tmp/health_history
          key: health-history-${{ github.run_number }}
          restore-keys: |
            health-history-

      - name: Update Health History
        if: always()
        env:
          HOMELAB_PATH: ~/homelab
          ALERT_THRESHOLD: ${{ env.ALERT_THRESHOLD }}
        run: bash homelab/scripts/monitor-ci.sh update-history "${{ steps.check.outputs.status }}" "${{ steps.check.outputs.failed_services }}"

      - name: Send Alert Notification
        if: failure() && env.consecutive_failures >= env.ALERT_THRESHOLD
        uses: actions/github-script@v7
        with:
          script: |
            const failed = '${{ steps.check.outputs.failed_services }}';
            const msg = `ðŸš¨ **Homelab Alert**: Multiple services failing!\n\n**Failed:** ${failed}\n\nCheck server immediately.`;
            const labels = 'homelab-alert,automated';

            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels,
              state: 'open'
            });

            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸš¨ Homelab Health Check Failed',
                body: msg,
                labels: ['homelab-alert', 'automated', 'critical']
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `${msg}\n\n_${new Date().toISOString()}_`
              });
            }

      - name: Close Alert Issue if Healthy
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'homelab-alert,automated',
              state: 'open'
            });

            for (const issue of issues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: 'âœ… All services healthy. Closing alert.'
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

  performance-metrics:
    name: Collect Performance Metrics
    runs-on: self-hosted
    needs: health-check
    if: success() || failure()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Collect Metrics
        id: metrics
        env:
          HOMELAB_PATH: ~/homelab
        run: |
          echo "Metrics collected at $(date -Iseconds)" > /tmp/metrics_summary.txt
          bash homelab/scripts/monitor-ci.sh metrics >> /tmp/metrics_summary.txt 2>&1 || true

      - name: Upload Metrics
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: homelab-metrics-${{ github.run_number }}
          path: /tmp/metrics_summary.txt
          retention-days: 7

      - name: Cleanup
        if: always()
        run: rm -f /tmp/metrics_summary.txt
