name: Monitor Homelab Health

on:
  schedule:
    # Run every 15 minutes
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      verbose:
        description: "Enable verbose output"
        required: false
        type: boolean
        default: false

env:
  ALERT_THRESHOLD: 3 # Number of consecutive failures before alert
  CHECK_TIMEOUT: 30 # Timeout for each health check in seconds

jobs:
  health-check:
    name: Check Homelab Services
    runs-on: self-hosted

    outputs:
      status: ${{ steps.check.outputs.status }}
      failed_services: ${{ steps.check.outputs.failed_services }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Perform Health Checks
        id: check
        env:
          VERBOSE: ${{ inputs.verbose }}
        run: |
          # Set HOMELAB_PATH if not set
          export HOMELAB_PATH="${HOMELAB_PATH:-$HOME/homelab}"

          # Execute health check using homelab script
          bash homelab/scripts/monitor-ci.sh health-check

          # Parse results
          source /tmp/health_status || true
          echo "status=${status:-unknown}" >> $GITHUB_OUTPUT
          echo "failed_services=${failed_services:-unknown}" >> $GITHUB_OUTPUT

          # Clean up
          rm -f /tmp/health_status

          # Exit with appropriate code
          if [ "${status:-unknown}" = "success" ]; then
            echo "✅ All health checks passed"
            exit 0
          elif [ "${status:-unknown}" = "warning" ]; then
            echo "⚠️ Health checks passed with warnings"
            exit 0
          else
            echo "❌ Health checks failed"
            exit 1
          fi

      - name: Store Health Check Results
        if: always()
        uses: actions/cache@v3
        with:
          path: /tmp/health_history
          key: health-history-${{ github.run_number }}
          restore-keys: |
            health-history-

      - name: Update Health History
        if: always()
        run: |
          mkdir -p /tmp/health_history
          echo "$(date -Iseconds),${{ steps.check.outputs.status }},${{ steps.check.outputs.failed_services }}" >> /tmp/health_history/history.csv

          # Keep only last 100 entries
          tail -n 100 /tmp/health_history/history.csv > /tmp/health_history/history.tmp
          mv /tmp/health_history/history.tmp /tmp/health_history/history.csv

          # Count consecutive failures
          CONSECUTIVE_FAILURES=$(tail -n ${{ env.ALERT_THRESHOLD }} /tmp/health_history/history.csv | grep -c "failure" || true)

          echo "consecutive_failures=$CONSECUTIVE_FAILURES" >> $GITHUB_ENV

      - name: Send Alert Notification
        if: failure() && env.consecutive_failures >= env.ALERT_THRESHOLD
        uses: actions/github-script@v7
        with:
          script: |
            const failed_services = '${{ steps.check.outputs.failed_services }}';
            const message = `🚨 **Homelab Alert**: Multiple services are failing!\n\nFailed services: ${failed_services}\n\nPlease check your homelab server immediately.`;

            // Create an issue if it doesn't exist
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'homelab-alert,automated',
              state: 'open'
            });

            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Homelab Services Health Check Failed',
                body: message,
                labels: ['homelab-alert', 'automated', 'critical']
              });
            } else {
              // Add comment to existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: message + `\n\n_Alert triggered at ${new Date().toISOString()}_`
              });
            }

      - name: Close Alert Issue if Healthy
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            // Close any open alert issues if services are healthy
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'homelab-alert,automated',
              state: 'open'
            });

            for (const issue of issues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '✅ All services are healthy again. Closing alert.'
              });

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

  performance-metrics:
    name: Collect Performance Metrics
    runs-on: self-hosted
    needs: health-check
    if: success() || failure()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Collect Metrics
        id: metrics
        run: |
          # Set HOMELAB_PATH if not set
          export HOMELAB_PATH="${HOMELAB_PATH:-$HOME/homelab}"

          # Execute metrics collection using homelab script
          bash homelab/scripts/monitor-ci.sh metrics > /tmp/metrics.txt 2>&1 || true

          # Store metrics as artifact
          echo "Metrics collected at $(date -Iseconds)" >> /tmp/metrics_summary.txt
          cat /tmp/metrics.txt >> /tmp/metrics_summary.txt

      - name: Upload Metrics
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: homelab-metrics-${{ github.run_number }}
          path: /tmp/metrics_summary.txt
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          rm -f /tmp/metrics.txt
          rm -f /tmp/metrics_summary.txt
