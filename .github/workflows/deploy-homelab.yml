name: Deploy to Homelab

on:
  push:
    branches: [main]
    paths:
      - "homelab/**"
      - ".github/workflows/deploy-homelab.yml"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even without changes"
        required: false
        type: boolean
        default: false
      rollback:
        description: "Rollback to previous version"
        required: false
        type: boolean
        default: false

env:
  DEPLOYMENT_TIMEOUT: 300
  HEALTH_CHECK_RETRIES: 5
  HEALTH_CHECK_DELAY: 10

jobs:
  deploy:
    name: Deploy to Homelab Server
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Fetch previous commit for comparison

      - name: Check for Changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.force_deploy }}" == "true" ]]; then
            echo "Force deployment requested"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Push event detected, checking for changes in homelab/"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in homelab directory"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Homelab
        if: steps.changes.outputs.has_changes == 'true'
        env:
          HOMELAB_PATH: ${{ vars.HOMELAB_PATH || '~/homelab' }}
          ROLLBACK: ${{ inputs.rollback || 'false' }}
          HEALTH_CHECK_RETRIES: 5
          HEALTH_CHECK_DELAY: 10
          MAX_BACKUPS: ${{ vars.MAX_BACKUPS || '5' }}
        run: bash homelab/scripts/deploy-ci.sh
      # - name: Send Success Notification
      #   if: success() && steps.changes.outputs.has_changes == 'true'
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const deployment_type = context.payload.inputs?.rollback === 'true' ? 'Rollback' : 'Deployment';
      #       const message = `✅ ${deployment_type} to homelab completed successfully!`;

      #       // Create deployment status
      #       await github.rest.repos.createDeploymentStatus({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         deployment_id: context.payload.deployment?.id || 1,
      #         state: 'success',
      #         description: message,
      #         environment: 'homelab'
      #       });

      #       // Add comment to PR if exists
      #       if (context.payload.pull_request) {
      #         await github.rest.issues.createComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           issue_number: context.payload.pull_request.number,
      #           body: message
      #         });
      #       }

      # - name: Send Failure Notification
      #   if: failure()
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const deployment_type = context.payload.inputs?.rollback === 'true' ? 'Rollback' : 'Deployment';
      #       const message = `❌ ${deployment_type} to homelab failed! Check the workflow logs for details.`;

      #       // Create deployment status
      #       await github.rest.repos.createDeploymentStatus({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         deployment_id: context.payload.deployment?.id || 1,
      #         state: 'failure',
      #         description: message,
      #         environment: 'homelab'
      #       });

      #       // Add comment to PR if exists
      #       if (context.payload.pull_request) {
      #         await github.rest.issues.createComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           issue_number: context.payload.pull_request.number,
      #           body: message
      #         });
      #       }

  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate Docker Compose Files
        run: |
          # Install docker-compose
          sudo apt-get update
          sudo apt-get install -y docker-compose

          # Validate main docker-compose file
          if [ -f "homelab/docker-compose.yml" ]; then
            echo "Validating docker-compose.yml..."
            docker-compose -f homelab/docker-compose.yml config -q || exit 1
          fi

          # Validate optimized docker-compose file if exists
          if [ -f "homelab/docker-compose-optimized.yml" ]; then
            echo "Validating docker-compose-optimized.yml..."
            docker-compose -f homelab/docker-compose-optimized.yml config -q || exit 1
          fi

      - name: Check for Secrets in Code
        run: |
          # Check for potential secrets
          echo "Checking for hardcoded secrets..."

          # Common patterns to check
          patterns=(
            "password.*=.*['\"].*['\"]"
            "api[_-]?key.*=.*['\"].*['\"]"
            "secret.*=.*['\"].*['\"]"
            "token.*=.*['\"].*['\"]"
          )

          found_secrets=false
          for pattern in "${patterns[@]}"; do
            if grep -r -i "$pattern" homelab/ --exclude-dir=.git --exclude="*.md"; then
              echo "WARNING: Potential secret found matching pattern: $pattern"
              found_secrets=true
            fi
          done

          if [ "$found_secrets" = true ]; then
            echo "Please review the above warnings and ensure no secrets are hardcoded"
            exit 1
          fi

          echo "No hardcoded secrets detected"
